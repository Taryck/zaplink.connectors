<?xml version="1.0" encoding="utf-16"?>
<CONTAINER NAME="ZAPLINK_CHECKPOINTS" VERSION="1.0" CLASS="ZAPLINK_CONTAINER">
 <ZL_OBJECT CHECKSUM="EE79F648D82A43B8462B88950FA7E9A5" CODE_SIGNATURE="9D6E174BC110D7A35E5F4766707055D5" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_ACID_DATA" TYPE="CLAS" VERSION="1.01">
  <DIRECTORY SRCSYSTEM="OD6" AUTHOR="TBENSIAL" DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
  <RAW>
   <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20100914" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="701">
    <INHERITANCE REFCLSNAME="ZAPLINK_CHECKPOINTS_DATA" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020"/>
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for Check Point Group">U1&amp;FUNCTIONALITY&amp;
ASIs part of connector : ZAPLINK_FUNCTION_GROUP
ASDefine XML structure of a Function group
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
    </TEXTS>
   </A0_MAINDATA>
   <ATTRIBUTS>
    <ITEM CMPNAME="A0_MAINDATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="TS_MAINDATA" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Program main data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="DESCRIPTIONS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="TT_LTEXTS" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Description texts"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="GLOBAL_SETTINGS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="TS_ACTIVATION" R3RELEASE="701"/>
    <ITEM CMPNAME="SETTINGS_FOR_SERVERS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="TT_SERVERS" R3RELEASE="701"/>
    <ITEM CMPNAME="SETTINGS_FOR_USERS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="TT_USERS" R3RELEASE="701"/>
   </ATTRIBUTS>
   <FRIENDS>
    <ITEM REFCLSNAME="ZAPLINK_CHECKPOINTS" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101018"/>
    <ITEM REFCLSNAME="ZAPLINK_EASYXML" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101018"/>
   </FRIENDS>
   <LOCAL>
    <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
    <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
    <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class</MACROS>
   </LOCAL>
   <METHODS>
    <ITEM CMPNAME="ANONYMIZE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101018" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Anonymized component data"/>
     </TEXTS>
     <SOURCE>`
  CLEAR: a0_maindata-create_user,  a0_maindata-create_date.
*ACT_USER
*ACT_DATE
*ACT_TIME</SOURCE>
    </ITEM>
    <ITEM CMPNAME="FROM_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert FM Data to object attributes"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="FM_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_FM_DATA">
       <TEXTS>
        <ITEM LANG="E" TEXT="Function Modules object Data"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  DATA s_user     LIKE LINE OF settings_for_users.
  DATA s_server   LIKE LINE OF settings_for_servers.
  DATA s_desc     LIKE LINE OF descriptions.
  FIELD-SYMBOLS:
    &lt;d&gt; LIKE LINE OF fm_data-descriptions,
    &lt;m&gt; LIKE LINE OF fm_data-modes.

*  a0_maindata = fm_data-header.
*  CLEAR: a0_maindata-devclass_txt, a0_maindata-masterlang_txt, a0_maindata-component_txt.
  LOOP AT fm_data-descriptions ASSIGNING &lt;d&gt;.
    CLEAR s_desc.   s_desc-lang = &lt;d&gt;-langu.     s_desc-text = &lt;d&gt;-descript.   INSERT s_desc INTO TABLE descriptions.
  ENDLOOP.

*ACT_USERS_INFO
*ACT_SERVERS_INFO
  LOOP AT fm_data-modes ASSIGNING &lt;m&gt;.
    IF NOT &lt;m&gt;-username IS INITIAL.
      CLEAR s_user.   s_user-user = &lt;m&gt;-username.   s_user-activation = conv_mode2activation( &lt;m&gt;-actmode ).
      INSERT s_user INTO TABLE settings_for_users.
    ELSEIF NOT &lt;m&gt;-server IS INITIAL.
      CLEAR s_server.   s_server-server = &lt;m&gt;-server.   s_server-activation = conv_mode2activation( &lt;m&gt;-actmode ).
      INSERT s_server INTO TABLE settings_for_servers.
    ELSEIF NOT &lt;m&gt;-actdefault IS INITIAL OR global_settings IS INITIAL.
      global_settings = conv_mode2activation( &lt;m&gt;-actmode ).
    ENDIF.
  ENDLOOP.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="TO_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert object attributes to FM Data"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="FM_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_FM_DATA">
       <TEXTS>
        <ITEM LANG="E" TEXT="Function Modules object Data"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  DATA s_mode     LIKE LINE OF fm_data-modes.
  DATA s_server   LIKE LINE OF settings_for_servers.
  DATA s_desc     LIKE LINE OF fm_data-descriptions.
  FIELD-SYMBOLS:
    &lt;d&gt; LIKE LINE OF descriptions,
    &lt;s&gt; LIKE LINE OF settings_for_servers,
    &lt;u&gt; LIKE LINE OF settings_for_users.

  LOOP AT descriptions ASSIGNING &lt;d&gt;.
    CLEAR s_desc.   s_desc-langu = &lt;d&gt;-lang.     s_desc-descript = &lt;d&gt;-text.   INSERT s_desc INTO TABLE fm_data-descriptions.
  ENDLOOP.

  s_mode-actmode = conv_activation2mode( global_settings ).     s_mode-actdefault = abap_true.
  INSERT s_mode INTO TABLE fm_data-modes.
*ACT_USERS_INFO
  LOOP AT settings_for_users ASSIGNING &lt;u&gt;.
    CLEAR s_mode.     s_mode-username = &lt;u&gt;-user.   s_mode-actmode = conv_activation2mode( &lt;u&gt;-activation ).
    INSERT s_mode INTO TABLE fm_data-modes.
  ENDLOOP.

*ACT_SERVERS_INFO
  LOOP AT settings_for_servers ASSIGNING &lt;s&gt;.
    CLEAR s_mode.     s_mode-server = &lt;s&gt;-server.   s_mode-actmode = conv_activation2mode( &lt;s&gt;-activation ).
    INSERT s_mode INTO TABLE fm_data-modes.
  ENDLOOP.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="UNANONYMIZE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101018" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="UnAnonymized component data"/>
     </TEXTS>
    </ITEM>
   </METHODS>
   <TYPEGROUPS>
    <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
   </TYPEGROUPS>
   <TYPES>
    <ITEM CMPNAME="TS_4SERVER" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_4server,
      server  TYPE aab_id_act-server.
  INCLUDE TYPE ts_activation as activation.
  TYPES:
    END OF ts_4server
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation checkbox for a user"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_4USER" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_4user,
      user    TYPE aab_id_act-username.
  INCLUDE TYPE ts_activation as activation.
  TYPES:
    END OF ts_4user
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation checkbox for a server"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_FM_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_fm_data,
      header          TYPE aab_id_prop,     &quot; aab_id_sfields,
      descriptions    TYPE STANDARD TABLE OF aab_id_propt WITH DEFAULT KEY,
      modes           TYPE aab_id_act_tab,
    END OF ts_fm_data
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Function Module Data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_MAINDATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_maindata.
  INCLUDE TYPE aab_id_sfields.
  TYPES:
    END OF ts_maindata
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Function Module main data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TT_SERVERS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     tt_servers TYPE SORTED TABLE OF ts_4server WITH UNIQUE KEY server
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation checkbox for servers"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TT_USERS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     tt_users TYPE SORTED TABLE OF ts_4user WITH UNIQUE KEY user
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation checkbox for users"/>
     </TEXTS>
    </ITEM>
   </TYPES>
  </RAW>
 </ZL_OBJECT>
 <ZL_OBJECT CHECKSUM="A0875454C3ACBE73C4CCBBC58FE75A07" CODE_SIGNATURE="CAF4B7D4466A7D17EBB5A4C65823D4D0" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_AVAR_DATA" TYPE="CLAS" VERSION="1.01">
  <DIRECTORY SRCSYSTEM="OD6" AUTHOR="TBENSIAL" DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
  <RAW>
   <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101019" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="701">
    <INHERITANCE REFCLSNAME="ZAPLINK_CHECKPOINTS_DATA" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020"/>
    <TEXTS>
     <ITEM LANG="E" TEXT="Data for variant for Check Point Group">U1&amp;FUNCTIONALITY&amp;
ASIs part of connector : ZAPLINK_FUNCTION_GROUP
ASDefine XML structure of a Function group
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
    </TEXTS>
   </A0_MAINDATA>
   <ALIASES>
    <ITEM CMPNAME="TD_COMPNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
    <ITEM CMPNAME="TD_COMPTYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   </ALIASES>
   <ATTRIBUTS>
    <ITEM CMPNAME="A0_MAINDATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="1" TYPE="TS_MAINDATA">
     <TEXTS>
      <ITEM LANG="E" TEXT="Program main data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="DEFINITIONS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="1" TYPE="TT_DEFINITIONS">
     <TEXTS>
      <ITEM LANG="E" TEXT="Variant list of definitions"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="DESCRIPTIONS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="1" TYPE="TT_LTEXTS">
     <TEXTS>
      <ITEM LANG="E" TEXT="Description texts"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="SEPARATOR" VERSION="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" ATTDECLTYP="2" ATTVALUE="&apos;~&apos;" TYPTYPE="1" TYPE="CHAR01" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Separator for variant name"/>
     </TEXTS>
    </ITEM>
   </ATTRIBUTS>
   <FRIENDS>
    <ITEM REFCLSNAME="ZAPLINK_CHECKPOINTS" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101019"/>
    <ITEM REFCLSNAME="ZAPLINK_EASYXML" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101019"/>
   </FRIENDS>
   <LOCAL>
    <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
    <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
    <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class</MACROS>
   </LOCAL>
   <METHODS>
    <ITEM CMPNAME="ANONYMIZE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020">
     <TEXTS>
      <ITEM LANG="E" TEXT="Anonymized component data"/>
     </TEXTS>
     <SOURCE>`
  CLEAR: a0_maindata-create_user,  a0_maindata-create_date.
*ACT_USER
*ACT_DATE
*ACT_TIME</SOURCE>
    </ITEM>
    <ITEM CMPNAME="FROM_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert FM Data to object attributes"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="FM_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_FM_DATA">
       <TEXTS>
        <ITEM LANG="E" TEXT="Function Modules object Data"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  DATA s_def      LIKE LINE OF definitions.
  DATA s_desc     LIKE LINE OF descriptions.
  FIELD-SYMBOLS:
    &lt;d&gt; LIKE LINE OF fm_data-descriptions,
    &lt;m&gt; LIKE LINE OF fm_data-modes.

*  a0_maindata = fm_data-header.
*  CLEAR: a0_maindata-devclass_txt, a0_maindata-masterlang_txt, a0_maindata-component_txt.
  LOOP AT fm_data-descriptions ASSIGNING &lt;d&gt;.
    CLEAR s_desc.   s_desc-lang = &lt;d&gt;-langu.     s_desc-text = &lt;d&gt;-descript.   INSERT s_desc INTO TABLE descriptions.
  ENDLOOP.

  LOOP AT fm_data-modes ASSIGNING &lt;m&gt;.
    CLEAR s_def.    s_def-type = &lt;m&gt;-object.    s_def-name = &lt;m&gt;-name.    s_def-activation = conv_mode2activation( &lt;m&gt;-actmode ).    INSERT s_def INTO TABLE definitions.
  ENDLOOP.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="KEY_2_NAME" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" MTDDECLTYP="1">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert Key to Name (E071 Entrie)"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_NAME">
       <TEXTS>
        <ITEM LANG="E" TEXT="Checkpoint Variant Key structure"/>
       </TEXTS>
      </ITEM>
      <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_COMPNAME">
       <TEXTS>
        <ITEM LANG="E" TEXT="Component name"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  IF data-user IS INITIAL.
    result = data-name.
  ELSE.
    CONCATENATE data-name separator data-user INTO result.
  ENDIF.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="NAME_2_KEY" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" MTDDECLTYP="1">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert Name (E071 Entrie) to Key"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME">
       <TEXTS>
        <ITEM LANG="E" TEXT="Component name"/>
       </TEXTS>
      </ITEM>
      <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_NAME">
       <TEXTS>
        <ITEM LANG="E" TEXT="Checkpoint Variant Key structure"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  SPLIT data AT separator INTO result-name result-user.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="TO_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert object attributes to FM Data"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="FM_DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_FM_DATA">
       <TEXTS>
        <ITEM LANG="E" TEXT="Function Modules object Data"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
  DATA s_mode     LIKE LINE OF fm_data-modes.
  DATA s_desc     LIKE LINE OF fm_data-descriptions.
  FIELD-SYMBOLS:
    &lt;d&gt; LIKE LINE OF descriptions,
    &lt;s&gt; LIKE LINE OF definitions.

  LOOP AT descriptions ASSIGNING &lt;d&gt;.
    CLEAR s_desc.   s_desc-langu = &lt;d&gt;-lang.     s_desc-descript = &lt;d&gt;-text.   INSERT s_desc INTO TABLE fm_data-descriptions.
  ENDLOOP.

  LOOP AT definitions ASSIGNING &lt;s&gt;.
    CLEAR s_mode.     s_mode-object = &lt;s&gt;-type.   s_mode-name = &lt;s&gt;-name.   s_mode-actmode = conv_activation2mode( &lt;s&gt;-activation ).    INSERT s_mode INTO TABLE fm_data-modes.
  ENDLOOP.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="UNANONYMIZE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020">
     <TEXTS>
      <ITEM LANG="E" TEXT="UnAnonymized component data"/>
     </TEXTS>
    </ITEM>
   </METHODS>
   <TYPEGROUPS>
    <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
   </TYPEGROUPS>
   <TYPES>
    <ITEM CMPNAME="TS_DEFINITION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4">
     BEGIN OF ts_definition,
      type    TYPE td_comptype,
      name    type td_compname.
  INCLUDE TYPE ts_activation AS activation.
  TYPES:
    END OF ts_definition
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Variant single definition"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_FM_DATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4">
     BEGIN OF ts_fm_data,
      header          TYPE aab_var_prop,     &quot; aab_var_sfields,
      descriptions    TYPE STANDARD TABLE OF aab_var_propt WITH DEFAULT KEY,
      modes           TYPE aab_var_obj_act_tab,
    END OF ts_fm_data
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Function Module Data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_MAINDATA" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4">
     BEGIN OF ts_maindata.
  INCLUDE TYPE aab_var_sfields.
  TYPES:
    END OF ts_maindata
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Function Module main data"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_NAME" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101019" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4">
     BEGIN OF ts_name,
      name    TYPE aab_var_name,
      user    TYPE aab_var_local,
    END OF ts_name
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Variant keys"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TT_DEFINITIONS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     tt_definitions TYPE SORTED TABLE OF ts_definition WITH UNIQUE KEY type name
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Variant list of definitions"/>
     </TEXTS>
    </ITEM>
   </TYPES>
  </RAW>
 </ZL_OBJECT>
 <ZL_OBJECT CHECKSUM="90E5DB7C1163C43945E42A132A6F6EAF" CODE_SIGNATURE="F1BF71CB560F4137FF569C5D57C6D463" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CHECKPOINTS" TYPE="CLAS" VERSION="1.01">
  <DEPENDENCIES>
   <ITEM TYPE="CLAS" NAME="ZAPLINK_CONNECTOR_"/>
   <ITEM TYPE="CLAS" NAME="ZAPLINK_ACID_DATA"/>
   <ITEM TYPE="CLAS" NAME="ZAPLINK_AVAR_DATA"/>
  </DEPENDENCIES>
  <DIRECTORY SRCSYSTEM="OD6" AUTHOR="TBENSIAL" DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
  <RAW>
   <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20100913" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="701" MSG_ID="ZAPLINK_CHECKPOINTS">
    <INHERITANCE REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101018"/>
    <TEXTS>
     <ITEM LANG="E" TEXT="Connector for Check points">U1&amp;FUNCTIONALITY&amp;
ASIs a connector for :
AS- FUGR : Function Group
U1&amp;RELATIONS&amp;
ASIs part of ZAP Link Framework as Official Connector.
ASRequire Official connector for Program types (PROG).
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AShttps://code.google.com/p/zaplink/wiki/Connector
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
    </TEXTS>
   </A0_MAINDATA>
   <ATTRIBUTS>
    <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" ATTDECLTYP="2" ATTVALUE="&apos;CNX_CHECKPOINTS&apos;" TYPTYPE="1" TYPE="BALSUBOBJ" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Application Log: Subobject"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="SUPPORTEDKINDS" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" ATTDECLTYP="1" TYPTYPE="4" R3RELEASE="701">BEGIN OF supportedkinds,
      checkpoint        TYPE td_transport_kind,
      variant           TYPE td_transport_kind,
    END OF supportedkinds
`</ITEM>
    <ITEM CMPNAME="SUPPORTEDTYPES" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" ATTDECLTYP="2" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF supportedtypes,
      checkpoint        TYPE td_comptype VALUE &apos;ACID&apos;,      &quot;#EC NOTEXT
      variant           TYPE td_comptype VALUE &apos;AVAR&apos;,      &quot;#EC NOTEXT
    END OF supportedtypes
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Connector supported types"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="_UUID" VERSION="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" ATTDECLTYP="2" ATTVALUE="&apos;D8638E4C3E11CC5AE1000000AC120173&apos;" TYPTYPE="1" TYPE="TD_CONNUUID" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="UUID for connector Program"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="_VER" VERSION="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" ATTDECLTYP="2" ATTVALUE="&apos;1.0&apos;" TYPTYPE="1" TYPE="TD_CONNVER" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Connector Version"/>
     </TEXTS>
    </ITEM>
   </ATTRIBUTS>
   <DEFERRED>
    <CLASSES>
     <ITEM TYPEGROUP="ZAPLINK_ACID_DATA" VERSION="1" TPUTYPE="1" EXPLICIT="X"/>
     <ITEM TYPEGROUP="ZAPLINK_AVAR_DATA" VERSION="1" TPUTYPE="1" EXPLICIT="X"/>
    </CLASSES>
   </DEFERRED>
   <LOCAL>
    <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
    <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
    <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.</MACROS>
   </LOCAL>
   <METHODS>
    <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" MTDTYPE="2" MTDDECLTYP="1" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
     </TEXTS>
     <SOURCE>`
  supportedkinds-checkpoint =  zaplink_connectors=&gt;get_typekind( supportedtypes-checkpoint ).
  supportedkinds-variant =  zaplink_connectors=&gt;get_typekind( supportedtypes-variant ).</SOURCE>
    </ITEM>
    <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" MTDTYPE="2" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
     </TEXTS>
     <SOURCE>`
  DATA type LIKE LINE OF supported_types.

  CALL METHOD super-&gt;constructor.
  mac_create_log application_log ballog_subobject space.
  type-type = supportedtypes-checkpoint.    INSERT type INTO TABLE supported_types.
  type-type = supportedtypes-variant.       INSERT type INTO TABLE supported_types.

  uuid = _uuid.
  version = _ver.</SOURCE>
    </ITEM>
   </METHODS>
   <REDEFINITIONS>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~ANONYMIZE">
     <SOURCE>`
  DATA o_checkpoint    TYPE to_checkpoint.
*  DATA o_variant       TYPE to_variant.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-checkpoint.
      o_checkpoint ?= object-&gt;raw.
      o_checkpoint-&gt;anonymize( ).
*    WHEN supportedtypes-variant.
*      o_variant ?= object-&gt;raw.
*      o_variant-&gt;anonymize( ).
    WHEN OTHERS.
       mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~anonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CLEANER~UNANONYMIZE">
     <SOURCE>`
  DATA o_checkpoint    TYPE to_checkpoint.
*  DATA o_variant       TYPE to_variant.

  CHECK object IS BOUND.

  CASE object-&gt;type.
    WHEN supportedtypes-checkpoint.
      o_checkpoint ?= object-&gt;raw.
      o_checkpoint-&gt;unanonymize( ).
*    WHEN supportedtypes-variant.
*      o_variant ?= object-&gt;raw.
*      o_variant-&gt;unanonymize( ).
    WHEN OTHERS.
       mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
  ENDCASE.

  TRY.
      super-&gt;zaplink_cnx_ext_cleaner~unanonymize( object ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CNX_EXT_CODE_SIGNATURE~GET_SIGNATURE">
     <SOURCE>`
*  DATA d_group TYPE td_functiongroup_name.
*  DATA d_func  TYPE td_function_name.
*  DATA d_type  TYPE td_comptype.
*
*  TRY.
*    d_type = component-&gt;get_type( ).
*    CASE d_type.
*      WHEN supportedtypes-checkpoint.
*        d_group = component-&gt;get_name( ).
*        result = get_group_signature( d_group ).
*      WHEN supportedtypes-variant.
*        d_func = component-&gt;get_name( ).
*        result = get_function_signature( d_func ).
*      WHEN OTHERS.
*        mac_raise_type_not_supported me-&gt;class_name d_type.
*    ENDCASE.
*
*    mac_def_catch zaplink_cx_connector.
*  ENDTRY.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~CREATE_NEW_RAW">
     <SOURCE>`
  DATA o_checkpoint   TYPE to_checkpoint.
  DATA o_variant      TYPE to_variant.

  CASE type.
    WHEN supportedtypes-checkpoint.
      CREATE OBJECT object.
      CREATE OBJECT o_checkpoint.
      object-&gt;raw = o_checkpoint.
    WHEN supportedtypes-variant.
      CREATE OBJECT object.
      CREATE OBJECT o_variant.
      object-&gt;raw = o_variant.
    WHEN OTHERS.
      CLEAR object.
      mac_raise_type_not_supported me-&gt;class_name type.
  ENDCASE.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DELETE_FROM_SAP">
     <SOURCE>`
  DATA o_checkpoint   TYPE REF TO cl_aab_id.
  DATA d_checkpoint   TYPE td_checkpoint.
  DATA state          TYPE flag.
  DATA o_variant      TYPE REF TO cl_aab_variant.
*  DATA d_variant      TYPE td_checkpoint.
  DATA type           TYPE td_comptype.
  DATA name           TYPE td_compname.
  DATA s_variant      TYPE zaplink_avar_data=&gt;ts_name.

  TRY.
    type = component-&gt;get_type( ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        d_checkpoint = name = component-&gt;get_name( ).

        CREATE OBJECT o_checkpoint
          EXPORTING
            im_name          = d_checkpoint
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING textid = zaplink_cx_connector=&gt;not_found
                        type = type
                        name = name.
        ENDIF.

        CALL METHOD o_checkpoint-&gt;enqueue
*          EXPORTING
*            enqueue_mode = &apos;E&apos;
*            no_cts       = SPACE
           EXCEPTIONS
             cts_error    = 1
             foreign_lock = 2
             system_error = 3
             OTHERS       = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_checkpoint &apos;ENQUEUE&apos; sy-subrc.
        ENDIF.

        CALL METHOD o_checkpoint-&gt;delete
          EXCEPTIONS
            act_error        = 1
            cts_devclass     = 2
            cts_error        = 3
            id_not_found     = 4
            id_still_used    = 5
            no_authorization = 6
            propt_error      = 7
            prop_error       = 8
            where_used_error = 9
            OTHERS           = 10.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_checkpoint &apos;DELETE&apos; sy-subrc.
        ENDIF.

*        o_checkpoint-&gt;dequeue =&gt; Made on commit

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        CREATE OBJECT o_variant
          EXPORTING
            im_name          = s_variant-name
            im_local         = s_variant-user
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ENDIF.

        CALL METHOD o_variant-&gt;delete
          EXCEPTIONS
            cts_devclass     = 1
            cts_error        = 2
            no_authorization = 3
            prop_error       = 4
            propt_error      = 5
            var_id_error     = 6
            var_not_found    = 7
            others           = 8.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_variant &apos;DELETE&apos; sy-subrc.
        ENDIF.

      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.

  result = abap_true.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~DO_EXISTS">
     <SOURCE>`
  DATA o_checkpoint   TYPE REF TO cl_aab_id.
  DATA d_checkpoint   TYPE td_checkpoint.
  DATA state          TYPE flag.
  DATA o_variant      TYPE REF TO cl_aab_variant.
*  DATA d_variant      TYPE td_checkpoint.
  DATA type           TYPE td_comptype.
  DATA name           TYPE td_compname.
  DATA s_variant      TYPE zaplink_avar_data=&gt;ts_name.

  exists = me-&gt;exists-not_exists.

  TRY.
    type = component-&gt;get_type( ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        d_checkpoint = component-&gt;get_name( ).
        CREATE OBJECT o_checkpoint
          EXPORTING
            im_name          = d_checkpoint
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ELSE.
          o_checkpoint-&gt;get_state( IMPORTING ex_state = state ).
          IF NOT state IS INITIAL.     exists = me-&gt;exists-exists.     ENDIF.
        ENDIF.

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        CREATE OBJECT o_variant
          EXPORTING
            im_name          = s_variant-name
            im_local         = s_variant-user
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ELSE.
          o_variant-&gt;get_state( IMPORTING ex_state = state ).
          IF NOT state IS INITIAL.     exists = me-&gt;exists-exists.     ENDIF.
        ENDIF.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~IS_SUPPORTED_VERSION">
     <SOURCE>`
  result = abap_false.
  if version = _ver.
    result = abap_true.
  endif.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~READ_FROM_SAP">
     <SOURCE>`
  DATA o_aab_id         TYPE REF TO cl_aab_id.
  DATA o_checkpoint     TYPE to_checkpoint.
  DATA s_fmd_acid       TYPE ts_fmd_acid.
*  DATA d_checkpoint     TYPE td_checkpoint.
  DATA type             TYPE td_comptype.
  DATA name             TYPE td_compname.
  DATA l_mode           TYPE aab_id_mode.
  DATA l_tstamp         TYPE aab_id_act-act_tstamp.
  DATA o_aab_variant    TYPE REF TO cl_aab_variant.
  DATA o_variant        TYPE to_variant.
  DATA s_variant        TYPE zaplink_avar_data=&gt;ts_name.
  DATA s_fmd_avar       TYPE ts_fmd_avar.

  TRY.
    type = component-&gt;get_type( ).
    CREATE OBJECT object.
    object-&gt;set_component( component ).
    CASE type.
      WHEN supportedtypes-checkpoint.
        s_fmd_acid-header-name = name = component-&gt;get_name( ).
        CREATE OBJECT o_aab_id
          EXPORTING
            im_name          = s_fmd_acid-header-name
          EXCEPTIONS
            name_not_allowed = 1
            OTHERS           = 2.
        IF sy-subrc &lt;&gt; 0.
          RAISE EXCEPTION TYPE zaplink_cx_connector
            EXPORTING textid = zaplink_cx_connector=&gt;not_found
                        type = type
                        name = name.
        ENDIF.

*        CALL METHOD o_aab_id-&gt;get_descript
*          EXPORTING
*            im_enforce_db_read   = abap_true
**            im_set_attribute     = &apos;X&apos;
*          IMPORTING
*            ex_descript          = s_fmd_acid-header-descript
*          EXCEPTIONS
*            no_description_found = 1
*            OTHERS               = 2.
*        IF sy-subrc &lt;&gt; 0.
*        ENDIF.
* Multilang =&gt;
        SELECT * INTO TABLE s_fmd_acid-descriptions
          FROM aab_id_propt
          WHERE name = s_fmd_acid-header-name.

* From LSAABP01 : Methode pbo_0310.
        CALL METHOD o_aab_id-&gt;get_all_modes
          IMPORTING
            ex_modes_tab  = s_fmd_acid-modes
          EXCEPTIONS
            no_mode_found = 1
            system_error  = 2
            OTHERS        = 3.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_aab_id &apos;GET_ALL_MODES&apos; sy-subrc.
        ENDIF.

        CREATE OBJECT o_checkpoint.
        o_checkpoint-&gt;from_data( s_fmd_acid ).
        CLEAR s_fmd_acid-header-name.
        object-&gt;raw = o_checkpoint.

      WHEN supportedtypes-variant.
        name = component-&gt;get_name( ).
        s_variant = zaplink_avar_data=&gt;name_2_key( name ).
        s_fmd_avar-header-name = s_variant-name.
        s_fmd_avar-header-local = s_variant-user.
        CREATE OBJECT o_aab_variant
          EXPORTING
            im_name          = s_fmd_avar-header-name
            im_local         = s_fmd_avar-header-local
          EXCEPTIONS
            name_not_allowed = 1
            no_authorization = 2
            user_not_valid   = 3
            OTHERS           = 4.
        IF sy-subrc &lt;&gt; 0.
          mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
        ENDIF.

* Multilang =&gt;
        SELECT * INTO TABLE s_fmd_avar-descriptions
          FROM aab_var_propt
          WHERE name = s_fmd_avar-header-name
           AND local = s_fmd_avar-header-local.

        CALL METHOD o_aab_variant-&gt;get_ids
          IMPORTING
            ex_ids       = s_fmd_avar-modes
          EXCEPTIONS
            id_not_valid = 1
            OTHERS       = 2.
        IF sy-subrc &lt;&gt; 0.
          mac_add_obj_meth_and_raise o_aab_variant &apos;GET_IDS&apos; sy-subrc.
        ENDIF.

        CREATE OBJECT o_variant.
        o_variant-&gt;from_data( s_fmd_avar ).
        CLEAR: s_fmd_avar-header-name, s_fmd_avar-header-local.
        object-&gt;raw = o_variant.
      WHEN OTHERS.
        mac_raise_type_not_supported me-&gt;class_name type.
    ENDCASE.

    object-&gt;update_connector_data( me ).                    &quot; Issue 66
    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
    </ITEM>
    <ITEM REFCLSNAME="ZAPLINK_CONNECTOR_" VERSION="1" MTDNAME="ZAPLINK_CONNECTOR~WRITE_TO_SAP">
     <SOURCE>`
  DATA o_aab_id         TYPE REF TO cl_aab_id.
  DATA o_checkpoint     TYPE to_checkpoint.
  DATA s_fmd_acid       TYPE ts_fmd_acid.
  DATA o_variant        TYPE to_variant.
  DATA s_fmd_avar       TYPE ts_fmd_avar.
  DATA _comp            TYPE to_component.
  DATA s_desc           LIKE LINE OF s_fmd_acid-descriptions.
  DATA d_nb_err         TYPE i.
  DATA lt_modes         TYPE aab_id_act_tab.
  DATA o_aab_variant    TYPE REF TO cl_aab_variant.
  DATA s_variant        TYPE zaplink_avar_data=&gt;ts_name.
  DATA s_var_desc       LIKE LINE OF s_fmd_avar-descriptions.
  DATA lt_var_modes     TYPE aab_var_obj_act_tab.
  FIELD-SYMBOLS:
    &lt;o&gt;  LIKE LINE OF lt_modes,
    &lt;v&gt;  LIKE LINE OF lt_var_modes,
    &lt;w&gt;  LIKE LINE OF s_fmd_avar-modes,
    &lt;m&gt;  LIKE LINE OF s_fmd_acid-modes.

  TRY.
      CREATE OBJECT components.
      CASE object-&gt;type.
        WHEN supportedtypes-variant.
          o_variant ?= object-&gt;raw.   s_variant = object-&gt;name.
          o_variant-&gt;a0_maindata-name = s_variant-name.     o_variant-&gt;a0_maindata-local = s_variant-user.
          s_fmd_avar = o_variant-&gt;to_data( ).
          CREATE OBJECT o_aab_variant
            EXPORTING
              im_name          = s_variant-name
              im_local         = s_variant-user
            EXCEPTIONS
              name_not_allowed = 1
              no_authorization = 2
              user_not_valid   = 3
              OTHERS           = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_name_meth_and_raise &apos;cl_aab_variant&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;enqueue
            EXPORTING
              enqueue_mode = &apos;E&apos;
            EXCEPTIONS
              cts_error    = 1
              foreign_lock = 2
              system_error = 3
              OTHERS       = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;ENQUEUE&apos; sy-subrc.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;get_ids
            IMPORTING
              ex_ids       = lt_var_modes
            EXCEPTIONS
              id_not_valid = 1
              OTHERS       = 2.
          IF sy-subrc = 0.
            LOOP AT lt_var_modes ASSIGNING &lt;v&gt;.
              READ TABLE s_fmd_avar-modes TRANSPORTING NO FIELDS WITH KEY
                  name = &lt;v&gt;-name
                object = &lt;v&gt;-object.
              CHECK sy-subrc &lt;&gt; 0.
              CALL METHOD o_aab_variant-&gt;del_id
                EXPORTING
                  im_name          = &lt;v&gt;-name
                  im_object        = &lt;v&gt;-object
                EXCEPTIONS
                  id_not_found     = 0
                  no_authorization = 2
                  OTHERS           = 3.
              IF sy-subrc &lt;&gt; 0.
                mac_add_obj_meth_and_raise o_aab_variant &apos;DEL_ID&apos; sy-subrc.
              ENDIF.
            ENDLOOP.
          ENDIF.

          LOOP AT s_fmd_avar-modes ASSIGNING &lt;w&gt;.
            CALL METHOD o_aab_variant-&gt;set_id
              EXPORTING
                im_name              = &lt;w&gt;-name
                im_object            = &lt;w&gt;-object
                im_actmode           = &lt;w&gt;-actmode
              EXCEPTIONS
                id_not_exists        = 1
                id_not_transportable = 2
                no_authorization     = 3
                OTHERS               = 4.
            IF sy-subrc &lt;&gt; 0.
              mac_add_obj_meth_and_raise o_aab_variant &apos;SET_ID&apos; sy-subrc.
            ENDIF.
          ENDLOOP.

          READ TABLE s_fmd_avar-descriptions INTO s_var_desc WITH KEY langu = sy-langu.
          IF sy-subrc &lt;&gt; 0.     READ TABLE s_fmd_avar-descriptions INTO s_var_desc INDEX 1.     ENDIF.
          IF sy-subrc &lt;&gt; 0.     s_var_desc-descript = s_variant-name.     ENDIF.

          CALL METHOD o_aab_variant-&gt;set_descript
            EXPORTING
              im_descript      = s_var_desc-descript
            EXCEPTIONS
              no_authorization = 1
              OTHERS           = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;SET_DESCRIPT&apos; sy-subrc.
          ENDIF.

          CALL METHOD o_aab_variant-&gt;save
            EXCEPTIONS
              cts_error             = 1
              no_changes_found      = 2
              no_descript_specified = 3
              prop_error            = 4
              propt_error           = 5
              var_id_error          = 6
              OTHERS                = 7.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_variant &apos;SAVE&apos; sy-subrc.
          ENDIF.

*          CALL METHOD o_aab_id-&gt;set_descript
*            EXPORTING
*              im_descript      =
**            EXCEPTIONS
**              no_authorization = 1
**              others           = 2
*                  .
* Multilang =&gt;
          DELETE FROM aab_var_propt WHERE name = s_fmd_avar-header-name
                                     AND local = s_fmd_avar-header-local.
          s_var_desc-name = s_variant-name.     s_var_desc-local = s_variant-user.
          MODIFY s_fmd_avar-descriptions FROM s_var_desc TRANSPORTING name local WHERE name IS INITIAL OR name IS NOT INITIAL.
          INSERT aab_var_propt FROM TABLE s_fmd_avar-descriptions.

          CALL METHOD o_aab_variant-&gt;dequeue
            EXPORTING
              dequeue_mode = &apos;E&apos;.

        WHEN supportedtypes-checkpoint.
          o_checkpoint ?= object-&gt;raw.
          o_checkpoint-&gt;a0_maindata-name = object-&gt;name.
          s_fmd_acid = o_checkpoint-&gt;to_data( ).
          s_fmd_acid-header-name = object-&gt;name.
          CREATE OBJECT o_aab_id
            EXPORTING
              im_name          = s_fmd_acid-header-name
            EXCEPTIONS
              name_not_allowed = 1
              OTHERS           = 2.
          IF sy-subrc &lt;&gt; 0.
            mac_add_name_meth_and_raise &apos;cl_aab_id&apos; &apos;CONSTRUCTOR&apos; sy-subrc &apos;ZAPLINK_CX_CONNECTOR&apos;.
          ENDIF.

          CALL METHOD o_aab_id-&gt;enqueue
            EXPORTING
              enqueue_mode = &apos;E&apos;
              no_cts       = space
            EXCEPTIONS
              cts_error    = 1
              foreign_lock = 2
              system_error = 3
              OTHERS       = 4.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_id &apos;ENQUEUE&apos; sy-subrc.
          ENDIF.

* Delete previously existing modes
          CALL METHOD o_aab_id-&gt;get_all_modes
            IMPORTING
              ex_modes_tab  = lt_modes
            EXCEPTIONS
              no_mode_found = 1
              OTHERS        = 2.
          IF sy-subrc = 0.
            LOOP AT lt_modes ASSIGNING &lt;o&gt;.
              READ TABLE s_fmd_acid-modes TRANSPORTING NO FIELDS WITH KEY
*              name = &lt;o&gt;-name
                username = &lt;o&gt;-username
                server = &lt;o&gt;-server
                is_program = &lt;o&gt;-is_program
                actdefault = &lt;o&gt;-actdefault.
              CHECK sy-subrc &lt;&gt; 0.
              CALL METHOD o_aab_id-&gt;delete_mode
                EXPORTING
                  im_user           = &lt;o&gt;-username
                  im_server         = &lt;o&gt;-server
                  im_actdefault     = &lt;o&gt;-actdefault
                  im_delete_from_db = space
                EXCEPTIONS
                  no_mode_found     = 0
                  no_authorization  = 2
                  act_error         = 1
                  OTHERS            = 4.
              IF sy-subrc &lt;&gt; 0.
                mac_add_obj_meth_and_raise o_aab_id &apos;DELETE_MODE&apos; sy-subrc.
              ENDIF.
            ENDLOOP.
          ENDIF.

          LOOP AT s_fmd_acid-modes ASSIGNING &lt;m&gt;.
            CALL METHOD o_aab_id-&gt;set_mode
              EXPORTING
                im_user            = &lt;m&gt;-username
                im_server          = &lt;m&gt;-server
                im_actdefault      = &lt;m&gt;-actdefault
                im_mode            = &lt;m&gt;-actmode
*                im_act_tstamp      =
*                im_exp_tstamp      =
*                im_no_autho_check  = SPACE
               IMPORTING
                 ex_nr_of_conflicts = d_nb_err
               EXCEPTIONS
                 no_authorization   = 1
                 OTHERS             = 2.
            IF sy-subrc &lt;&gt; 0.
              mac_add_obj_meth_and_raise o_aab_id &apos;SET_MODE&apos; sy-subrc.
            ELSEIF d_nb_err &lt;&gt; 0.

            ENDIF.
          ENDLOOP.

          CALL METHOD o_aab_id-&gt;save
*            EXPORTING
*              no_change_rtm_activation = SPACE
            EXCEPTIONS
              act_error                = 1
              cts_error                = 2
              no_changes_found         = 3
              no_descript_specified    = 4
              prop_error               = 5
              propt_error              = 6
              sync_attributes_error    = 7
              OTHERS                   = 8.
          IF sy-subrc &lt;&gt; 0.
            mac_add_obj_meth_and_raise o_aab_id &apos;SAVE&apos; sy-subrc.
          ENDIF.

*          CALL METHOD o_aab_id-&gt;set_descript
*            EXPORTING
*              im_descript      =
**            EXCEPTIONS
**              no_authorization = 1
**              others           = 2
*                  .
* Multilang =&gt;
          DELETE FROM aab_id_propt WHERE name = s_fmd_acid-header-name.
          s_desc-name = s_fmd_acid-header-name.   MODIFY s_fmd_acid-descriptions FROM s_desc TRANSPORTING name WHERE name &lt;&gt; s_fmd_acid-header-name.
          INSERT aab_id_propt FROM TABLE s_fmd_acid-descriptions.

          CALL METHOD o_aab_id-&gt;dequeue
            EXPORTING
              dequeue_mode = &apos;E&apos;.

        WHEN OTHERS.
          mac_raise_type_not_supported me-&gt;class_name object-&gt;type.
      ENDCASE.
      check_component_list( EXPORTING     object = object
                             CHANGING components = components ). &quot; Issue 92

    CATCH zaplink_cx_connector INTO o_mycx.
      ROLLBACK WORK.
      RAISE EXCEPTION o_mycx.
    CATCH zaplink_cx INTO o_cx.
      ROLLBACK WORK.
      mac_cascade_raise o_mycx o_cx.
  ENDTRY.</SOURCE>
    </ITEM>
   </REDEFINITIONS>
   <TEXTSPOOL>
    <ITEM ID="I" KEY="D00">
     <TEXTS>
      <ITEM LANGU="E" ENTRY="Confirm module function deletion" LENGTH="50 "/>
     </TEXTS>
    </ITEM>
    <ITEM ID="I" KEY="HNO">
     <TEXTS>
      <ITEM LANGU="E" ENTRY="Function is not deleted and process to next existing function. Function group will be created without this function." LENGTH="132 "/>
     </TEXTS>
    </ITEM>
    <ITEM ID="I" KEY="HYE">
     <TEXTS>
      <ITEM LANGU="E" ENTRY="Function is deleted. Function group will be created with this function." LENGTH="132 "/>
     </TEXTS>
    </ITEM>
    <ITEM ID="I" KEY="NO_">
     <TEXTS>
      <ITEM LANGU="E" ENTRY="No" LENGTH="15 "/>
     </TEXTS>
    </ITEM>
    <ITEM ID="I" KEY="YES">
     <TEXTS>
      <ITEM LANGU="E" ENTRY="Yes" LENGTH="15 "/>
     </TEXTS>
    </ITEM>
   </TEXTSPOOL>
   <TYPEGROUPS>
    <ITEM TYPEGROUP="ABAP" VERSION="1" EXPLICIT="X"/>
   </TYPEGROUPS>
   <TYPES>
    <ITEM CMPNAME="TD_CHECKPOINT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="AAB_ID_NAME" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Checkpoint Group"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TD_VARIANT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101018" TYPTYPE="1" TYPE="STRING" R3RELEASE="701"/>
    <ITEM CMPNAME="TO_CHECKPOINT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="3" TYPE="ZAPLINK_ACID_DATA" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Data for Checkpoint"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TO_VARIANT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="3" TYPE="ZAPLINK_AVAR_DATA" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="Data for Checkpoint variant"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_FMD_ACID" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101018" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="1" TYPE="ZAPLINK_ACID_DATA=&gt;TS_FM_DATA" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="FM Data for check points"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_FMD_AVAR" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 " AUTHOR="TBENSIAL" CREATEDON="20101020" TYPTYPE="1" TYPE="ZAPLINK_AVAR_DATA=&gt;TS_FM_DATA" R3RELEASE="701">
     <TEXTS>
      <ITEM LANG="E" TEXT="FM Data for check points variant"/>
     </TEXTS>
    </ITEM>
   </TYPES>
  </RAW>
 </ZL_OBJECT>
 <ZL_OBJECT CHECKSUM="1192BDE43E137465B2F10C0136A82F52" CODE_SIGNATURE="ADCED24CC092C262E2873B9C47973700" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CHECKPOINTS_DATA" TYPE="CLAS" VERSION="1.01">
  <DIRECTORY SRCSYSTEM="OD6" AUTHOR="TBENSIAL" DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
  <RAW>
   <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="701">
    <INHERITANCE REFCLSNAME="ZAPLINK_RAW_DATA" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020"/>
    <TEXTS>
     <ITEM LANG="E" TEXT="Commun part for checkpoint and variants"/>
    </TEXTS>
   </A0_MAINDATA>
   <ALIASES>
    <ITEM CMPNAME="LINE_SEPARATOR" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
    <ITEM CMPNAME="TD_ABAPSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
    <ITEM CMPNAME="TD_CHECKBOX" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKBOX"/>
    <ITEM CMPNAME="TD_CHECKSUM" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
    <ITEM CMPNAME="TT_ABAPRAWSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
    <ITEM CMPNAME="TT_DOCS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
    <ITEM CMPNAME="TT_DYNPROS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DYNPROS"/>
    <ITEM CMPNAME="TT_LTEXTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_LTEXTS"/>
    <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   </ALIASES>
   <FRIENDS>
    <ITEM REFCLSNAME="ZAPLINK_CHECKPOINTS" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020"/>
    <ITEM REFCLSNAME="ZAPLINK_EASYXML" VERSION="1" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020"/>
   </FRIENDS>
   <INTERFACES>
    <ITEM REFCLSNAME="ZAPLINK_DATATYPES" VERSION="1" EXPOSURE="2" STATE="1" AUTHOR="TBENSIAL" CREATEDON="20101020" RELTYPE="1"/>
   </INTERFACES>
   <LOCAL>
    <TYPES>`
*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
    <IMPLEMENTATIONS>`
*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
    <MACROS>`
*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</MACROS>
   </LOCAL>
   <METHODS>
    <ITEM CMPNAME="CONV_ACTIVATION2MODE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" MTDDECLTYP="1">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert activation checkboxes to Mode number"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="ACTIVATION" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_ACTIVATION">
       <TEXTS>
        <ITEM LANG="E" TEXT="Activation checkbox structure"/>
       </TEXTS>
      </ITEM>
      <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_MODE">
       <TEXTS>
        <ITEM LANG="E" TEXT="Activation Mode for Checkpoint Groups"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
* From LSAABP01 : Methode pai_0310.

* convert activation mode
  CALL METHOD cl_aab_tool=&gt;convert_input_to_mode
    EXPORTING
      bp_inactive            = activation-breakpoints-inactive
      bp_stop                = activation-breakpoints-break
      lp_inactive            = activation-logpoints-inactive
      lp_log                 = activation-logpoints-log
      as_fg_inactive         = activation-assertions-inactive
      as_fg_stop_bg_protocol = activation-assertions-break-log
      as_fg_stop_bg_rabax    = activation-assertions-break-abort
      as_fg_protocol         = activation-assertions-log
      as_fg_rabax            = activation-assertions-abort
    IMPORTING
      mode                   = result
    EXCEPTIONS
      mode_not_valid         = 1
      OTHERS                 = 2.
  ASSERT sy-subrc = 0.</SOURCE>
    </ITEM>
    <ITEM CMPNAME="CONV_MODE2ACTIVATION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" MTDDECLTYP="1">
     <TEXTS>
      <ITEM LANG="E" TEXT="Convert Mode number to activation checkboxes"/>
     </TEXTS>
     <PARAMETERS>
      <ITEM SCONAME="MODE" VERSION="1" CMPTYPE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_MODE">
       <TEXTS>
        <ITEM LANG="E" TEXT="Activation Mode for Checkpoint Groups"/>
       </TEXTS>
      </ITEM>
      <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_ACTIVATION">
       <TEXTS>
        <ITEM LANG="E" TEXT="Activation checkbox structure"/>
       </TEXTS>
      </ITEM>
     </PARAMETERS>
     <SOURCE>`
* From LSAABP01 : Methode pbo_0310.

* convert activation mode
  CALL METHOD cl_aab_tool=&gt;convert_mode_to_output
    EXPORTING
      mode                   = mode
    IMPORTING
      bp_inactive            = result-breakpoints-inactive
      bp_stop                = result-breakpoints-break
      lp_inactive            = result-logpoints-inactive
      lp_log                 = result-logpoints-log
      as_fg_inactive         = result-assertions-inactive
      as_fg_stop_bg_protocol = result-assertions-break-log
      as_fg_stop_bg_rabax    = result-assertions-break-abort
      as_fg_protocol         = result-assertions-log
      as_fg_rabax            = result-assertions-abort.
*      as_bg_text             = s_fmd_acid-header-as_bg_act_txt.
*  IF NOT result-assertions-break-log IS INITIAL
*    OR NOT result-assertions-break-abort IS INITIAL.
*    CALL METHOD cl_aab_tool=&gt;convert_flags_comb_to_single
*      EXPORTING
*        as_fg_stop_bg_protocol = result-assertions-break-log
*        as_fg_stop_bg_rabax    = result-assertions-break-abort
*      IMPORTING
*        as_fg_stop             = s_fmd_acid-header-as_fg_stop
*        as_bg_protocol         = s_fmd_acid-header-as_bg_protocol
*        as_bg_rabax            = s_fmd_acid-header-as_bg_rabax.
*  ENDIF.</SOURCE>
    </ITEM>
   </METHODS>
   <TYPES>
    <ITEM CMPNAME="TD_MODE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="1" TYPE="AAB_ID_MODE">
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation Mode for Checkpoint Groups"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_ACTIVATION" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4">
     BEGIN OF ts_activation,
      breakpoints TYPE ts_bp_act,
      logpoints   TYPE ts_lp_act,
      assertions  TYPE ts_a_act,
    END OF ts_activation
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Activation checkbox structure"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_A_ACT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_a_act,
      inactive    TYPE td_checkbox,
      log         TYPE td_checkbox,
      abort       TYPE td_checkbox,
      BEGIN OF break,
        log         TYPE td_checkbox,
        abort       TYPE td_checkbox,
      END OF break,
    END OF ts_a_act
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Assertion Activation checkboxes"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_BP_ACT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_bp_act,
      inactive    TYPE td_checkbox,
      break       TYPE td_checkbox,
    END OF ts_bp_act
`
     <TEXTS>
      <ITEM LANG="E" TEXT="Break Point Activation checkboxes"/>
     </TEXTS>
    </ITEM>
    <ITEM CMPNAME="TS_LP_ACT" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " AUTHOR="TBENSIAL" CREATEDON="20101020" CHANGEDBY="TBENSIAL" CHANGEDON="20101020" TYPTYPE="4" R3RELEASE="701">
     BEGIN OF ts_lp_act,
      inactive    TYPE td_checkbox,
      log         TYPE td_checkbox,
    END OF ts_lp_act
`
     <TEXTS>
      <ITEM LANG="E" TEXT="LogPoint Activation checkboxes"/>
     </TEXTS>
    </ITEM>
   </TYPES>
  </RAW>
 </ZL_OBJECT>
 <ZL_OBJECT CHECKSUM="74983392D267E415182E72DFD3487642" CONNECTOR="1FAC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_CHECKPOINTS" TYPE="MSAG" VERSION="1.0">
  <DIRECTORY SRCSYSTEM="OD6" AUTHOR="TBENSIAL" DEVCLASS="ZAPLINK-CONNECTORS-MAIN" MASTERLANG="E"/>
  <RAW>
   <A0_MAINDATA MASTERLANG="E" RESPUSER="TBENSIAL" LASTUSER="TBENSIAL" LDATE="20100913" LTIME="165634"/>
   <TEXTS>
    <ITEM LANGU="E" SHORT_TXT="Messages for connector ZAPLINK_CHECKPOINTS : Checkpoints"/>
   </TEXTS>
  </RAW>
 </ZL_OBJECT>
</CONTAINER>
